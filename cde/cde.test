cde is a cd replacer
===================

    >>> from cde import cde
    >>> assert "knows where you've been" in cde.__doc__

More modules for testing
------------------------

    >>> import os
    >>> import sys

Finding sub-directories
-----------------------

The parsed arguments are sent on to the cde.find_directory method
    Give it a directory to start on
    >>> assert cde.find_directory('/usr/lib', []) == '/usr/lib'

Or a file
    ('/bin/ls' is actually a link to '/usr/bin/ls' on some systems)
    >>> assert cde.find_directory('/bin/ls', []) in {'/bin', '/usr/bin'}

Give it the name of a (possible) sub directory
    and it will combine them to one path
    >>> assert cde.find_directory('/usr/local', ['sbin']) == '/usr/local/sbin'

The sub-dir can be a prefix
    >>> assert cde.find_directory('/usr/local', ['sbi']) == '/usr/local/sbin'

It can handle many prefixes (albeit more slowly)
    >>> assert cde.find_directory('/', ['us', 'loc', 'sbi']) == '/usr/local/sbin'

In case of ambiguous sub-directories a number can choose one
    >>> assert cde.find_directory('/usr', ['li', '0']).startswith('/usr/li')

Fallbacks
---------

If directory is not found directly then try in PATH
    >>> assert cde.find_directory('grep', []) in { '/bin', '/usr/bin' }

If that fails, then try in home directory
    >>> assert cde.find_directory('.bashrc', []) == os.path.expanduser('~')

Remembering history
-------------------

cde can also remember a list of paths

    >>> assert cde._path_to_history().endswith('cde/history')
    >>> class Args:
    ...     dirname = cde.__file__
    >>> cde.add(Args())
    >>> stored = False
    >>> for _rank, path, _time in cde.read_history():
    ...     if path == os.path.dirname(cde.__file__):
    ...          stored = True
    ...          break
    >>> assert stored
    >>> assert os.path.isfile(cde._path_to_history())


Finding in history
------------------

Assuming we have remembered some paths
    >>> history = [
    ...     cde.paths.path('/usr/bin'),
    ...     cde.paths.path('/usr/local/bin'),
    ...     cde.paths.path('/usr/tin/local'),
    ...     cde.paths.path('/usr/bin/vocal'),
    ...     cde.paths.path('/usr/local/bib'),
    ... ]

Then we should be able to search that history for a remembered item
    which should be found first is exact same as a history item
    >>> expected = sought = history[2]
    >>> assert expected == cde._find_in_paths(sought, [], history)

Or even if it is just the name of one
    >>> sought = os.path.basename(sought)
    >>> history_paths = [cde.paths.path(_) for _ in history]
    >>> assert expected == cde._find_in_paths(sought, [], history_paths)

Or even just the stem of the name
    >>> sought = sought[:3]
    >>> assert expected == cde._find_in_paths(sought, [], history_paths)


Cleanup
=======
    >>> sys.argv = []
