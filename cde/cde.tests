Edge cases for cde
=================

    >>> from cde import cde

More modules for testing
------------------------

    >>> import os
    >>> import sys

find_directory()
----------------

Directories sought must be real

    >>> cde.find_directory('rubbish', [])
    Traceback (most recent call last):
    ...
    cde.ToDo: ...

    >>> a_known_directory = '/usr/local'

Can use empty prefixes - gives path to the directory

    >>> cde.find_directory(a_known_directory, []) == a_known_directory
    True

If sub-dir is not found, get only the directory
    >>> cde.find_directory(a_known_directory, ['this_is_not_real']) == a_known_directory
    True

If the sub-dir matches too many directories then an exception is raised
    >>> try:
    ...     cde.find_directory('/usr', ['li'])
    ... except cde.TryAgain as e:
    ...     assert not [_ for _ in e.possibles if not _.startswith('/usr/li')]

Which can be suppressed by a numeric arg
    >>> cde.find_directory('/usr', ['li', '1']).startswith('/usr/li')
    True

As long as that arg is in range
    >>> try:
    ...     cde.find_directory('/usr', ['li', '99'])
    ...     assert False
    ... except cde.RangeError:
    ...     assert True

A number out of context is ignored
    >>> cde.find_directory('/usr', ['1']) == '/usr'
    True

find a file
-----------

    >>> directory, filename = os.path.split(cde.__file__)
    >>> cde.find_directory(cde.__file__, []) == directory
    True
    >>> cde.find_directory(directory, [filename]) == directory
    True


Find in home directory
----------------------

    >>> my_bin = cde.find_at_home('bi', [])
    >>> os.path.dirname(my_bin) == os.path.expanduser('~') and os.path.basename(my_bin) == 'bin'
    True
    >>> cde.find_at_home('.bashrc', []) == os.path.expanduser('~')
    True
    >>> cde.find_at_home('rubbush', []) is None
    True

Finding in history
------------------

Assuming we have remembered some paths
    >>> history = [
    ...     '/usr/bin',
    ...     '/usr/local/bin',
    ...     '/usr/tin/local',
    ...     '/usr/bin/vocal',
    ...     '/usr/local/bib',
    ... ]
    >>> history_paths = [cde.paths.path(_) for _ in history]

    >>> try:
    ...     cde._find_in_paths('bin', [], history_paths)
    ... except cde.TryAgain as e:
    ...     assert '/usr/bin' in e.possibles
    ...     assert '/usr/local/bin' in e.possibles

    >>> assert cde._find_in_paths('bin', ['0'], history_paths) == '/usr/bin'
    >>> assert cde._find_in_paths('bin', ['1'], history_paths) == '/usr/local/bin'
    >>> assert cde._find_in_paths('bi', ['0'], history_paths) == '/usr/bin'
    >>> assert cde._find_in_paths('bi', ['1'], history_paths) == '/usr/local/bin'
    >>> assert cde._find_in_paths('bi', ['2'], history_paths) == '/usr/local/bib'
    >>> assert cde._find_in_paths('tin', [], history_paths) == '/usr/tin/local'
    >>> assert cde._find_in_paths('ti', [], history_paths) == '/usr/tin/local'
    >>> assert not cde._find_in_paths('sin', [], history_paths)
    >>> assert cde._find_in_paths('in/', ['0'], history_paths) == '/usr/tin/local'
    >>> assert cde._find_in_paths('in/v', [], history_paths) == '/usr/bin/vocal'
    >>> assert cde._find_in_paths('usr', ['3'], history_paths) == '/usr/bin/vocal'


    >>> path_to_item = '/i/was/here'
    >>> history_items = [
    ...  (0, path_to_item, 0),
    ...  (0, '/so/were/you', 0),
    ... ]
    >>> new_items, changed = cde.exclude_path_from_items(history_items, path_to_item)
    >>> assert changed is True and len(new_items) + 1 == len(history_items)
    >>> newer_items, changed = cde.exclude_path_from_items(new_items, path_to_item)
    >>> assert changed is False and len(new_items) == len(newer_items)


Python dirs
-----------

cde has a setup.py

    >>> project_dir = cde.paths.path(os.path.dirname(cde.__file__))
    >>> code_dir = project_dir / 'cde'
    >>> possibles = [code_dir, project_dir]
    >>> assert cde.find_python_root_dir(possibles) == project_dir


Cleanup
=======
    >>> sys.argv = []
