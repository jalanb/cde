Edge cases for cde
=================

    >>> from cde import cde
    >>> assert "knows where you've been" in cde.__doc__

More modules for testing
------------------------

    >>> import os
    >>> import sys
    >>> import random
    >>> from pysyte.types import paths

find_directory()
----------------

Directories sought must be real

If directory is not real, an execption is raised
    >>> try:
    ...     cde.find_directory('rubbish', [])
    ...     assert False
    ... except cde.ToDo:
    ...     assert True

Assuming tests are run on a Unix system, so /usr/local should exist
    >>> real_directory = '/usr/local'
    >>> assert os.path.isdir(real_directory)

Can use empty prefixes - gives path to the directory

    >>> assert cde.find_directory(real_directory, []) == real_directory

If sub-dir is not found, get only the directory
    >>> assert cde.find_directory(real_directory, ['this_is_not_real']) == real_directory

If the sub-dir matches too many directories then an exception is raised
    Expecting a standard unix layout here, which contains at least
        /usr/local
        /usr/lib
    >>> try:
    ...     cde.find_directory('/usr', ['l'])
    ... except cde.TryAgain as e:
    ...     assert e.possibles
    ...     assert not [_ for _ in e.possibles if not _.startswith('/usr/l')]

Which can be suppressed by a numeric arg
    >>> assert cde.find_directory('/usr', ['l', '1']).startswith('/usr/l')

As long as that arg is in range
    >>> try:
    ...     cde.find_directory('/usr', ['l', '99'])
    ...     assert False
    ... except cde.RangeError:
    ...     assert True

A number out of context is ignored
    >>> assert cde.find_directory('/usr', ['1']) == '/usr'

find a file
-----------

    >>> directory, filename = os.path.split(cde.__file__)
    >>> assert cde.find_directory(cde.__file__, []) == directory
    >>> assert cde.find_directory(directory, [filename]) == directory


Find in home directory
----------------------

    >>> home_dir = random.choice(paths.home().dirs())
    >>> name = home_dir.name
    >>> found = cde.find_at_home(name, [])
    >>> assert os.path.dirname(found) == os.path.expanduser('~')
    >>> assert os.path.basename(found) == name
    >>> assert cde.find_at_home('.bashrc', []) == os.path.expanduser('~')
    >>> assert cde.find_at_home('rubbush', []) is None

Finding in history
------------------

Assuming we have remembered some paths
    >>> history = [
    ...     '/usr/bin',
    ...     '/usr/local/bin',
    ... ]
    >>> history_paths = [cde.paths.path(_) for _ in history]

    >>> try:
    ...     _ = cde._find_in_paths('bin', [], history_paths)
    ... except cde.TryAgain as e:
    ...     assert '/usr/bin' in e.possibles
    ...     assert '/usr/local/bin' in e.possibles

    >>> assert cde._find_in_paths('bin', ['0'], history_paths) == '/usr/bin'
    >>> assert cde._find_in_paths('bin', ['1'], history_paths) == '/usr/local/bin'
    >>> assert cde._find_in_paths('bi', ['0'], history_paths) == '/usr/bin'
    >>> assert cde._find_in_paths('bi', ['1'], history_paths) == '/usr/local/bin'
    >>> assert cde._find_in_paths('/b', ['0'], history_paths) == '/usr/bin'
    >>> assert cde._find_in_paths('al/b', [], history_paths) == '/usr/local/bin'
    >>> assert cde._find_in_paths('usr', ['1'], history_paths) == '/usr/local/bin'
    >>> assert not cde._find_in_paths('sin', [], history_paths)


    >>> path_to_item = '/i/was/here'
    >>> history_items = [
    ...  (0, path_to_item, 0),
    ...  (0, '/so/were/you', 0),
    ... ]
    >>> new_items, changed = cde.exclude_path_from_items(history_items, path_to_item)
    >>> assert changed is True
    >>> assert len(new_items) + 1 == len(history_items)
    >>> newer_items, changed = cde.exclude_path_from_items(new_items, path_to_item)
    >>> assert changed is False
    >>> assert len(new_items) == len(newer_items)


Python dirs
-----------

cde has a setup.py

    >>> code_dir = cde.paths.path(os.path.dirname(cde.__file__))
    >>> project_dir = code_dir.parent
    >>> possibles = [code_dir, project_dir]
    >>> assert cde.find_python_root_dir(possibles) == project_dir


Cleanup
=======
    >>> sys.argv = []
