kd is a cd replacer
===================

	>>> import kd

More modules for testing
------------------------

	>>> import os
	>>> import sys

Command Line
------------

kd is intended to be used from the command line

On the command line we expect two arguments:
	The first is a possible directory
	The rest are prefixes of possible sub-directories

	>>> sys.argv = ['kd.py', 'start', 'here']
	>>> options, item, prefixes = kd.parse_command_line()
	>>> item == 'start' and prefixes == ['here']
	True

No prefixes is fine too

	>>> sys.argv = ['kd.py', 'start']
	>>> options, item, prefixes = kd.parse_command_line()
	>>> item == 'start' and prefixes == []
	True


Finding sub-directories
-----------------------

The parsed arguments are sent on to the kd.find_directory method
	Give it a directory to start on
	>>> print kd.find_directory('/usr/lib', [])
	/usr/lib

Or a file
	>>> print kd.find_directory('/bin/ls', [])
	/bin

Give it the name of a (possible) sub directory
	and it will combine them to one path
	>>> print kd.find_directory('/usr/local', ['sbin'])
	/usr/local/sbin

The sub-dir can be a prefix
	>>> print kd.find_directory('/usr/local', ['sbi'])
	/usr/local/sbin

It can handle many prefixes (albeit more slowly)
	>>> print kd.find_directory('/', ['us', 'loc', 'sbi'])
	/usr/local/sbin

Fallbacks
---------

If directory is not found directly then try in PATH
	>>> kd.find_directory('ls', []) == '/bin'
	True

If that fails, then try in home directory
	>>> kd.find_directory('.bashrc', []) == os.path.expanduser('~')
	True

Running from bash
-----------------

If run from the command line the python process cannot change dir for calling process (bash)
	Hence the script just prints out the result
	bash can then capture that and do the actual cd

Hence the main method will print the found directory
	and then return 0 for success, 1 for fail
	>>> sys.argv = ['kd', '/usr', 'local', 'lib']
	>>> kd.main()
	/usr/local/lib
	0

Cleanup
=======
	>>> sys.argv = []
