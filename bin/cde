#! /usr/local/bin/python3
"""cde knows where you are going because it knows where you've been"""
import bdb
import os
import bdb

from pysyte.cli.main import run
from pysyte.types import paths

from cde import cde


def add_args(parser):
    """Get the arguments from the command line.

    Insist on at least one empty string"""
    parser.boolean('-0', '--first', help='Only show first path')
    parser.boolean('-1', '--second', help='Only show second path')
    parser.boolean('-2', '--third', help='Only show third path')
    parser.optional(
        'dirname', metavar='item', default='', help='(partial) directory name')
    parser.positional('subdirnames', help='(partial) sub directory names')
    # From here argument names correspend to methods above
    parser.boolean('-a', '--add', help='add a path to history')
    parser.boolean('-c', '--complete', help='show all paths in history')
    parser.boolean('-d', '--delete', help='delete a path from history')
    parser.boolean('-e', '--existing', help='show all real paths in history')
    parser.boolean('-f', '--filename', help='show filename of the script')
    parser.boolean('-l', '--lost', help='show all unreal paths in history')
    parser.boolean('-m', '--makedir', help='Ensure the given directory exists')
    parser.boolean('-o', '--old', help='look for paths in history')
    parser.boolean(
        '-p', '--purge', help='remove all non-existent paths from history')
    parser.boolean('-t', '--test', help='test the script')
    parser.boolean('-u', '--unused', help='show unused args')
    parser.boolean('-v', '--version', help='show version of the script')


def run_args(args):
    """Run any methods in cde module that are eponymous with args"""
    if not args:
        return False
    valued_args = {k for k, v in args.items() if v}
    cde_args = {getattr(cde, _, None) for _ in dir(cde) if _ in valued_args}
    cde_methods = {a for a in cde_args if callable(a)}
    for method in cde_methods:
        method(args)


def previous_directory():
    """Where we were (in bash) before this directory"""
    try:
        return os.environ['OLDPWD']
    except KeyError:
        return '~'


def set_args_directory(args):
    if not args.dirname:
        args.subdirnames = []
        if args.add:
            return '.'
        if not args.old:
            return paths.home()
    if args.dirname == '-':
        return previous_directory()
    return args.dirname


def post_parse_args(args):
    args._result.index = None
    sub_numbers = [int(a) for a in args._result.subdirnames if a.isdigit()]
    if sub_numbers:
        args._result.subdirnames = [
            a for a in args._result.subdirnames if not a.isdigit()]
        args._result.index = min(sub_numbers)
    if args.third:
        args._result.index = 2
    if args.second:
        args._result.index = 1
    if args.first:
        args._result.index = 0
    run_args(args.get_args())
    args._result.dirname = set_args_directory(args)
    return args


def main(args):
    """Show a directory from the command line arguments (or some derivative)"""
    try:
        if args.unused:
            pass
        return cde.cde(args.dirname, args.subdirnames)
    except (bdb.BdbQuit, SystemExit):
        return True
    except AttributeError as e:
        go_away = 'attribute \'path\'" in <function _remove'
        if go_away not in str(e):
            raise
    except cde.TryAgain as e:
        if args.index is not None:
            try:
                one = e.possibles[args.index]
                print(one)
                return True
            except IndexError:
                pass
        print('Try again:', e)
        return False
    except cde.ToDo as e:
        print('Error:', e)
        return False


run(main, add_args, post_parse_args,
    usage='%(prog)s [dirname [subdirname ...]')
