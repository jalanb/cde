Edge cases for kd
=================

    >>> import kd

More modules for testing
------------------------

    >>> import os
    >>> import sys

Command lines
-------------

We allow more than two args on command line

    >>> sys.argv = ['kd.py', 'start', 'here', 'or', 'there']
    >>> args = kd.parse_args()
    >>> args.directory == 'start' and args.prefixes == ['here', 'or', 'there']
    True

And no args at all (use home directory)

    >>> sys.argv = ['kd.py']
    >>> args = kd.parse_args()
    >>> args.directory == os.path.expanduser('~') and not args.prefixes
    True

find_directory()
----------------

Directories sought must be real

    >>> kd.find_directory('rubbish', [])
    Traceback (most recent call last):
    ...
    ToDo: ...

    >>> a_known_directory = os.environ['HOME']

Can use empty prefixes - gives path to the directory

    >>> kd.find_directory(a_known_directory, []) == a_known_directory
    True

If sub-dir is not found, get only the directory
    >>> kd.find_directory(a_known_directory, ['this_is_not_real']) == a_known_directory
    True

If the sub-dir matches too many directories then an exception is raised
    >>> kd.find_directory('/usr', ['li'])
    Traceback (most recent call last):
    ...
    TryAgain: Too many possiblities
         0: /usr/li...
         1: /usr/li...

Which can be suppressed by a numeric arg
    >>> kd.find_directory('/usr', ['li', '1']).startswith('/usr/li')
    True
    >>> kd.find_directory('/usr', ['li', '99'])
    Traceback (most recent call last):
    ...
    ToDo: Your choice of "99" is not in range:
         0: /usr/li...
         1: /usr/li...

A number out of context is ignored
    >>> kd.find_directory('/usr', ['1']) == '/usr'
    True

find a file
-----------

    >>> directory, filename = os.path.split(kd.__file__)
    >>> kd.find_directory(kd.__file__, []) == directory
    True
    >>> kd.find_directory(directory, [filename]) == directory
    True


Find in home directory
----------------------

    >>> my_bin = kd.find_at_home('bi', [])
    >>> os.path.dirname(my_bin) == os.path.expanduser('~') and os.path.basename(my_bin) == 'bin'
    True
    >>> kd.find_at_home('.bashrc', []) == os.path.expanduser('~')
    True
    >>> kd.find_at_home('rubbush', []) is None
    True

main()
------

When main() fails it prints out an error
    >>> sys.argv = [ 'kd', 'no_such_directory' ]
    >>> kd.main()
    Error: could not use 'no_such_directory' as a directory
    1

Finding in history
------------------

Assuming we have remembered some paths
    >>> history = [
    ...     '/usr/bin',
    ...     '/usr/local/bin',
    ...     '/usr/tin/local',
    ...     '/usr/bin/vocal',
    ...     '/usr/local/bib',
    ... ]
    >>> history_paths = [kd.paths.path(_) for _ in history]

    >>> kd._find_in_paths('bin', [], history_paths)
    Traceback (most recent call last):
    ...
    TryAgain: Too many possiblities
         0: /usr/bin
         1: /usr/local/bin
    >>> kd._find_in_paths('bin', ['0'], history_paths) == '/usr/bin'
    True
    >>> kd._find_in_paths('bin', ['1'], history_paths) == '/usr/local/bin'
    True
    >>> kd._find_in_paths('bi', ['0'], history_paths) == '/usr/bin'
    True
    >>> kd._find_in_paths('bi', ['1'], history_paths) == '/usr/local/bin'
    True
    >>> kd._find_in_paths('bi', ['2'], history_paths) == '/usr/local/bib'
    True
    >>> kd._find_in_paths('tin', [], history_paths) == '/usr/tin/local'
    True
    >>> kd._find_in_paths('ti', [], history_paths) == '/usr/tin/local'
    True
    >>> not kd._find_in_paths('sin', [], history_paths)
    True
    >>> kd._find_in_paths('in/', ['0'], history_paths) == '/usr/tin/local'
    True
    >>> kd._find_in_paths('in/v', [], history_paths) == '/usr/bin/vocal'
    True
    >>> kd._find_in_paths('usr', [], history_paths)
    Traceback (most recent call last):
    ...
    TryAgain: Too many possiblities
         0: /usr/bin
         1: /usr/local/bin
    >>> kd._find_in_paths('usr', ['3'], history_paths) == '/usr/bin/vocal'
    True


    >>> path_to_item = '/i/was/here'
    >>> history_items = [
    ...  (0, path_to_item, 0),
    ...  (0, '/so/were/you', 0),
    ... ]
    >>> new_items, changed = kd.exclude_path_from_items(history_items, path_to_item)
    >>> changed is True and len(new_items) + 1 == len(history_items)
    True
    >>> newer_items, changed = kd.exclude_path_from_items(new_items, path_to_item)
    >>> changed is False and len(new_items) == len(newer_items)
    True


Python dirs
-----------

kd has a setup.py

    >>> project_dir = kd.paths.path(os.path.dirname(kd.__file__))
    >>> code_dir = project_dir / 'kd'
    >>> possibles = [code_dir, project_dir]
    >>> kd.find_python_root_dir(possibles) == project_dir
    True


Cleanup
=======
    >>> sys.argv = []
