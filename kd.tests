Edge cases for kd
=================

	>>> import kd

More modules for testing
------------------------

	>>> import os
	>>> import sys

Command lines
-------------

We allow more than two args on command line

	>>> sys.argv = ['kd.py', 'start', 'here', 'or', 'there']
	>>> options, item, prefixes = kd.parse_command_line()
	>>> item == 'start' and prefixes == ['here', 'or', 'there']
	True

And no args at all (use home directory)

	>>> sys.argv = ['kd.py']
	>>> options, path_to_dir, prefixes = kd.parse_command_line()
	>>> path_to_dir == os.path.expanduser('~') and not prefixes
	True

List directories
----------------

	>>> kd.contains_glob('/usr','*oca*')
	True
	>>> kd.contains_glob('/usr','*oca')
	False
	>>> kd.contains_file('/usr','*oca*')
	False
	>>> kd.contains_file('/usr','*oca')
	False
	>>> kd.contains_directory('/usr','*oca*')
	True
	>>> kd.contains_directory('/usr','*oca')
	False
	>>> '/usr/lib' in kd.list_sub_directories('/usr','l*')
	True
	>>> '/usr/lib' in kd.list_sub_directories('/usr','a*')
	False
	>>> '/bin/ls' in kd.list_files('/bin','l*')
	True
	>>> '/bin/ls' in kd.list_files('/bin','a*')
	False

find_directory()
----------------

Directories sought must be real

	>>> kd.find_directory('rubbish', [])
	Traceback (most recent call last):
	...
	ToDo: ...

	>>> a_known_directory = os.environ['HOME']

Can use empty prefixes - gives path to the directory

	>>> kd.find_directory(a_known_directory, []) == a_known_directory
	True

If sub-dir is not found, get only the directory
	>>> kd.find_directory(a_known_directory, ['this_is_not_real']) == a_known_directory
	True

If the sub-dir matches too many directories then an exception is raised
	>>> kd.find_directory('/usr', ['li'])
	Traceback (most recent call last):
	...
	TryAgain: Too many possiblities
		 0: /usr/lib
		 1: /usr/libexec

Which can be suppressed by a numeric arg
	>>> kd.find_directory('/usr', ['li', '1']) == '/usr/libexec'
	True
	>>> kd.find_directory('/usr', ['li', '2']) == '/usr/libexec'
	Traceback (most recent call last):
	...
	ToDo: Your choice of "2" is out of range:
		 0: /usr/lib
		 1: /usr/libexec

A number out of context is ignored
	>>> kd.find_directory('/usr', ['1']) == '/usr'
	True

Find in home directory
----------------------

	>>> my_bin = kd.find_at_home('bi', [])
	>>> os.path.dirname(my_bin) == os.path.expanduser('~') and os.path.basename(my_bin) == 'bin'
	True
	>>> kd.find_at_home('.bashrc', []) == os.path.expanduser('~')
	True
	>>> kd.find_at_home('rubbush', []) is None
	True

main()
------

When main() fails it prints out an error
	>>> sys.argv = [ 'kd', 'no_such_directory' ]
	>>> kd.main()
	Error: could not use 'no_such_directory' as a directory
	1

Finding in history
------------------

Assuming we have remembered some paths
	>>> history = [
	...     '/usr/bin',
	...     '/usr/local/bin',
	...     '/usr/tin/local',
	...     '/usr/bin/vocal',
	...     '/usr/local/bib',
	... ]

	>>> '/usr/bin' == kd._find_in_paths('bin', history)
	True
	>>> '/usr/tin/local' == kd._find_in_paths('tin', history)
	True
	>>> '/usr/bin' == kd._find_in_paths('bi', history)
	True
	>>> '/usr/tin/local' == kd._find_in_paths('ti', history)
	True
	>>> not kd._find_in_paths('in', history)
	True
	>>> '/usr/tin/local' == kd._find_in_paths('in/', history)
	True
	>>> '/usr/bin/vocal' == kd._find_in_paths('in/v', history)
	True


Cleanup
=======
	>>> sys.argv = []
