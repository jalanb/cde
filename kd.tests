Edge cases for kd
=================

	>>> import kd

More modules for testing
------------------------

	>>> import os
	>>> import sys

Command lines
-------------

We allow more than two args on command line

	>>> sys.argv = ['kd.py', 'start', 'here', 'or', 'there']
	>>> kd.parse_command_line()
	('start', ['here', 'or', 'there'])

And no args at all (use home directory)

	>>> sys.argv = ['kd.py']
	>>> path_to_dir, prefixes = kd.parse_command_line()
	>>> path_to_dir == os.path.expanduser('~') and not prefixes
	True

List directories
----------------

	>>> kd.contains_glob('/usr','*oca*')
	True
	>>> kd.contains_glob('/usr','*oca')
	False
	>>> kd.contains_file('/usr','*oca*')
	False
	>>> kd.contains_file('/usr','*oca')
	False
	>>> kd.contains_directory('/usr','*oca*')
	True
	>>> kd.contains_directory('/usr','*oca')
	False
	>>> '/usr/lib' in kd.list_sub_directories('/usr','l*')
	True
	>>> '/usr/lib' in kd.list_sub_directories('/usr','a*')
	False
	>>> '/bin/ls' in kd.list_files('/bin','l*')
	True
	>>> '/bin/ls' in kd.list_files('/bin','a*')
	False

find_directory()
----------------

Directories sought must be real

	>>> kd.find_directory('rubbish', [])
	Traceback (most recent call last):
	...
	ValueError: ...

	>>> a_known_directory = os.environ['HOME']

Can use empty prefixes - gives path to the directory

	>>> kd.find_directory(a_known_directory, []) == a_known_directory
	True

If sub-dir is not found, get only the directory
	>>> kd.find_directory(a_known_directory, ['this_is_not_real']) == a_known_directory
	True

main()
------

When main() fails it prints out an error
	>>> sys.argv = [ 'kd', 'no_such_directory' ]
	>>> kd.main()
	Error could not use 'no_such_directory' as a directory
	1

Cleanup
=======
	>>> sys.argv = []
